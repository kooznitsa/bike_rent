services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    hostname: backend
    container_name: backend
    restart: always
    depends_on:
      - postgres
    command: >
      /bin/bash -c "poetry run python manage.py migrate --noinput
      && poetry run python manage.py collectstatic --noinput
      & wait
      && poetry run gunicorn core.wsgi --bind=0.0.0.0:8000 --workers=1 --log-level=critical"
    ports:
      - '8000:8000'
    env_file:
      - .env
    volumes:
      - ./:/home/app
      - static-volume:/home/app/staticfiles
    networks:
      - external-net

  postgres:
    image: postgres:16
    shm_size: '1gb'
    hostname: postgres
    container_name: postgres
    restart: on-failure
    env_file:
      - .env
    ports:
      - '6432:6432'
    volumes:
      - db-postgres:/var/lib/postgresql/data
      - ./scripts/create_databases.sql:/docker-entrypoint-initdb.d/create_databases.sql
    networks:
      - external-net

  test_postgres:
    image: postgres:16
    shm_size: '1gb'
    hostname: test_postgres
    container_name: test_postgres
    restart: on-failure
    environment:
      POSTGRES_DB: bike_rent_database
      POSTGRES_USER: bike_rent_user
      POSTGRES_PASSWORD: bike_rent_password
      POSTGRES_PORT: 5432
      POSTGRES_HOST: test_postgres
    ports:
      - '5433:5432'
    volumes:
      - test-postgres:/var/lib/postgresql/data
      - ./scripts/create_databases.sql:/docker-entrypoint-initdb.d/create_databases.sql
    networks:
      - external-net

  redis:
    image: redis:6.2-alpine
    container_name: redis
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - redis:/data
    networks:
      - external-net

  worker:
    build: .
    depends_on:
      - postgres
      - backend
      - redis
    container_name: worker
    restart: unless-stopped
    volumes:
      - ./:/home/app
    env_file:
      - .env
    command: 'poetry run celery -A core.celery worker --beat -l info -Q main-queue -c 1'
    networks:
      - external-net

  nginx:
    image: nginx:1.25
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static-volume:/home/static
    container_name: nginx
    restart: on-failure
    ports:
      - '1337:80'
    depends_on:
      - backend
    networks:
      - external-net

volumes:
  static-volume:
  db-postgres:
    driver: local
  test-postgres:
    driver: local
  redis:
    driver: local

networks:
  external-net:
    external: true